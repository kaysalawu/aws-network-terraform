#cloud-config

package_update: true
package_upgrade: true
packages:
  - docker.io
  - docker-compose

write_files:
  - path: /var/lib/azure/fastapi/docker-compose-http-80.yml
    owner: root
    permissions: 0744
    content: |
      services:
        http-80:
          container_name: http-80
          hostname: -DCK-http-80
          build:
            context: ./app/app
            dockerfile: Dockerfile
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '0.0.0.0' --port 80
          restart: always
        http-80-ipv6:
          container_name: http-80-ipv6
          hostname: -DCK-http-80-ipv6
          build:
            context: ./app/app
            dockerfile: Dockerfile
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '::' --port 80
          restart: always
      
  - path: /var/lib/azure/fastapi/docker-compose-http-8080.yml
    owner: root
    permissions: 0744
    content: |
      services:
        http-8080:
          container_name: http-8080
          hostname: -DCK-http-8080
          image: ksalawu/fastapi:latest
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '0.0.0.0' --port 8080
          restart: always
        http-8080-ipv6:
          container_name: http-8080-ipv6
          hostname: -DCK-http-8080-ipv6
          image: ksalawu/fastapi:latest
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '::' --port 8080
          restart: always
      
  - path: /var/lib/azure/init/startup.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      export CLOUD_ENV=aws
      exec > /var/log/$CLOUD_ENV-startup.log 2>&1
      export DEBIAN_FRONTEND=noninteractive
      
      METADATA_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/tags/instance/Name)
      hostnamectl set-hostname $METADATA_HOSTNAME
      sed -i "s/127.0.0.1.*/127.0.0.1 $HOSTNAME/" /etc/hosts
      
      echo 'PS1="\\h:\\w\\$ "' >> /etc/bash.bashrc
      echo 'PS1="\\h:\\w\\$ "' >> /root/.bashrc
      echo 'PS1="\\h:\\w\\$ "' >> /home/ubuntu/.bashrc
      
      apt update
      apt install -y unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      apt install -y awscli
      
      # test scripts (ipv4)
      #---------------------------
      
      # ping-ipv4
      cat <<'EOF' >/usr/local/bin/ping-ipv4
      # ping-ipv4
      echo -e "\n ping ipv4 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        name=$(echo $target | jq -r '.name')
        ipv4=$(echo $target | jq -r '.ipv4 // empty')
        if [[ -n "$ipv4" ]]; then
          result=$(timeout 3 ping -4 -qc2 -W1 $ipv4 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')
          echo "$name - $ipv4 - $result"
        fi
      done
      EOF
      chmod a+x /usr/local/bin/ping-ipv4
      
      # ping-dns4
      cat <<'EOF' >/usr/local/bin/ping-dns4
      echo -e "\n ping dns ipv4 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        host=$(echo $target | jq -r '.host')
        ping=$(echo $target | jq -r '.ping // false')
        if [[ "$ping" == "true" ]]; then
          resolved_ip=$(timeout 3 dig +short $host | tail -n1)
          result=$(timeout 3 ping -4 -qc2 -W1 $host 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')
          echo "$host - $resolved_ip - $result"
        fi
      done
      EOF
      chmod a+x /usr/local/bin/ping-dns4
      
      # curl-ipv4
      cat <<'EOF' >/usr/local/bin/curl-ipv4
      echo -e "\n curl ipv4 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        name=$(echo $target | jq -r '.name')
        ipv4=$(echo $target | jq -r '.ipv4 // ""')
        curl=$(echo $target | jq -r '.curl // true')
        if [[ "$curl" == "true" && -n "$ipv4" ]]; then
          result=$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null $ipv4)
          echo "$result - $name [$ipv4]"
        fi
      done
      EOF
      chmod a+x /usr/local/bin/curl-ipv4
      
      # curl-dns4
      cat <<'EOF' >/usr/local/bin/curl-dns4
      echo -e "\n curl dns ipv4 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        host=$(echo $target | jq -r '.host')
        curl=$(echo $target | jq -r '.curl // true')
        if [[ "$curl" == "true" ]]; then
          result=$(timeout 3 curl -4 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null $host)
          echo "$result - $host"
        fi
      done
      EOF
      chmod a+x /usr/local/bin/curl-dns4
      
      # trace-ipv4
      cat <<'EOF' >/usr/local/bin/trace-ipv4
      echo -e "\n trace ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/trace-ipv4
      
      # ptr-ipv4
      cat <<'EOF' >/usr/local/bin/ptr-ipv4
      echo -e "\n PTR ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/ptr-ipv4
      
      # ping-dns6
      cat <<'EOF' >/usr/local/bin/ping-dns6
      echo -e "\n ping dns ipv6 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        host=$(echo $target | jq -r '.host')
        ping=$(echo $target | jq -r '.ping // false')
        if [[ "$ping" == "true" ]]; then
          resolved_ip=$(timeout 3 dig AAAA +short $host | tail -n1)
          result=$(timeout 3 ping -6 -qc2 -W1 $host 2>&1 | awk -F'/' 'END{ print (/^rtt/? "OK "$5" ms":"NA") }')
          echo "$host - $resolved_ip - $result"
        fi
      done
      EOF
      chmod a+x /usr/local/bin/ping-dns6
      
      # curl-dns6
      cat <<'EOF' >/usr/local/bin/curl-dns6
      echo -e "\n curl dns ipv6 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        host=$(echo $target | jq -r '.host')
        curl=$(echo $target | jq -r '.curl // true')
        if [[ "$curl" == "true" ]]; then
          result=$(timeout 3 curl -6 -kL --max-time 3.0 -H 'Cache-Control: no-cache' -w "%{http_code} (%{time_total}s) - %{remote_ip}" -s -o /dev/null $host)
          echo "$result - $host"
        fi
      done
      EOF
      chmod a+x /usr/local/bin/curl-dns6
      
      # trace-dns6
      cat <<'EOF' >/usr/local/bin/trace-dns6
      echo -e "\n trace ipv6 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        name=$(echo $target | jq -r '.name')
        ping=$(echo $target | jq -r '.ping // false')
        if [[ "$ping" == "true" ]]; then
          echo -e "\n$name"
          echo -e "-------------------------------------"
          timeout 9 tracepath -6 $host
        fi
      done
      EOF
      chmod a+x /usr/local/bin/trace-dns6
      
      # other scripts
      #---------------------------
      
      # dns-info
      cat <<'EOF' >/usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # traffic generators (ipv4)
      #---------------------------
      
      # light-traffic generator
      cat <<'EOF' >/usr/local/bin/light-traffic
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        probe=$(echo $target | jq -r '.probe // false')
        if [[ "$probe" == "true" ]]; then
          count=$(echo $target | jq -r '.count // "5"')
          protocol=$(echo $target | jq -r '.protocol // "tcp"')
          port=$(echo $target | jq -r '.port // "80,8080"')
          host=$(echo $target | jq -r '.host // empty')
          nping -c $count --$protocol-connect -p $port $host > /dev/null 2>&1
        fi
      done
      EOF
      chmod a+x /usr/local/bin/light-traffic
      
      # heavy-traffic generator
      cat <<'EOF' >/usr/local/bin/heavy-traffic
      #!/bin/bash
      i=0
      while [ $i -lt 5 ]; do
        cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
          ab -n $1 -c $2 $(echo $target | jq -r '.host') > /dev/null 2>&1
        done
        let i=i+1
        sleep 5
      done
      EOF
      chmod a+x /usr/local/bin/heavy-traffic
      
      # traffic generators (ipv6)
      #---------------------------
      
      # light-traffic generator
      cat <<'EOF' >/usr/local/bin/light-traffic-ipv6
      echo -e "\n light traffic ipv6 ...\n"
      cat /usr/local/bin/targets.json | jq -c '.[]' | while IFS= read -r target; do
        probe=$(echo $target | jq -r '.probe // false')
        if [[ "$probe" == "true" ]]; then
          count=$(echo $target | jq -r '.count // "5"')
          protocol=$(echo $target | jq -r '.protocol // "tcp"')
          port=$(echo $target | jq -r '.port // "80,8080"')
          host=$(echo $target | jq -r '.host // empty')
          nping -c $count -6 --$protocol-connect -p $port $host > /dev/null 2>&1
        fi
      done
      EOF
      chmod a+x /usr/local/bin/light-traffic-ipv6
      
      # systemctl services
      #---------------------------
      
      cat <<EOF > /etc/systemd/system/flaskapp.service
      [Unit]
      Description=Manage Docker Compose services for FastAPI
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=simple
      Environment="HOSTNAME=$(hostname)"
      ExecStart=/usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-80.yml up -d && \
                /usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-8080.yml up -d
      ExecStop=/usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-80.yml down && \
               /usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-8080.yml down
      Restart=always
      StandardOutput=journal
      StandardError=journal
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      systemctl daemon-reload
      systemctl enable flaskapp.service
      systemctl restart flaskapp.service
      
      # crontabs
      #---------------------------
      
      cat <<'EOF' >/etc/cron.d/traffic-gen
      EOF
      
      crontab /etc/cron.d/traffic-gen
      
  - path: usr/local/bin/targets.json
    owner: root
    permissions: 0744
    content: |
      [{"host":"branch1Vm.cloudtuple.org","ipv4":"10.10.0.5","ipv6":"2000:abc:10::5","name":"branch1","probe":true},{"host":"hub1Vm.eu.c.cloudtuple.org","ipv4":"10.11.0.5","ipv6":"2000:abc:11::5","name":"hub1   ","probe":true},{"host":"spoke3pls.eu.c.cloudtuple.org","name":"hub1-spoke3-pep","ping":false,"probe":true},{"host":"spoke1Vm.eu.c.cloudtuple.org","ipv4":"10.1.0.5","ipv6":"2000:abc:1::5","name":"spoke1 ","probe":true},{"host":"spoke2Vm.eu.c.cloudtuple.org","ipv4":"10.2.0.5","ipv6":"2000:abc:2::5","name":"spoke2 ","probe":true},{"host":"branch3Vm.cloudtuple.org","ipv4":"10.30.0.5","ipv6":"2000:abc:30::5","name":"branch3","probe":true},{"host":"hub2Vm.us.c.cloudtuple.org","ipv4":"10.22.0.5","ipv6":"2000:abc:22::5","name":"hub2   ","probe":true},{"host":"spoke6pls.us.c.cloudtuple.org","name":"hub2-spoke6-pep","ping":false,"probe":true},{"host":"spoke4Vm.us.c.cloudtuple.org","ipv4":"10.4.0.5","ipv6":"2000:abc:4::5","name":"spoke4 ","probe":true},{"host":"spoke5Vm.us.c.cloudtuple.org","ipv4":"10.5.0.5","ipv6":"2000:abc:5::5","name":"spoke5 ","probe":true},{"host":"icanhazip.com","name":"internet"}]

runcmd:
  - bash /var/lib/azure/init/startup.sh
  - docker-compose -f /var/lib/azure/fastapi/docker-compose-http-80.yml up -d
  - docker-compose -f /var/lib/azure/fastapi/docker-compose-http-8080.yml up -d
